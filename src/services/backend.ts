// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async stopLogin() : Promise<void> {
    await TAURI_INVOKE("stop_login");
},
async exit() : Promise<Result<number, JsonValue>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("exit") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async smsLogin(cid: number, tel: string, code: string, captchaKey: string) : Promise<Result<number, JsonValue>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("sms_login", { cid, tel, code, captchaKey }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async pwdLogin(username: string, encodedPwd: string, token: string, challenge: string, validate: string, seccode: string) : Promise<Result<number, JsonValue>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pwd_login", { username, encodedPwd, token, challenge, validate, seccode }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async switchCookie(switchCode: string) : Promise<Result<number, JsonValue>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("switch_cookie", { switchCode }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async scanLogin(qrcodeKey: string, event: TAURI_CHANNEL<number>) : Promise<Result<number, JsonValue>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("scan_login", { qrcodeKey, event }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async refreshCookie(refreshCsrf: string) : Promise<Result<number, JsonValue>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("refresh_cookie", { refreshCsrf }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ready() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("ready") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async init(secret: string) : Promise<Result<InitData, JsonValue>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("init", { secret }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSize(path: string, event: TAURI_CHANNEL<number>) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_size", { path, event }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async cleanCache(path: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clean_cache", { path }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async writeBinary(secret: string, path: string, contents: number[]) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("write_binary", { secret, path, contents }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async xmlToAss(secret: string, path: string, filename: string, contents: number[]) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("xml_to_ass", { secret, path, filename, contents }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async rwConfig(action: string, settings: { [key in string]: JsonValue } | null, secret: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("rw_config", { action, settings, secret }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async pushBackQueue(info: MediaInfoListItem, currentSelect: CurrentSelect, tasks: Task[], ts: Timestamp, ext: string, output: string | null, ssTitle: string) : Promise<Result<QueueInfo, JsonValue>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("push_back_queue", { info, currentSelect, tasks, ts, ext, output, ssTitle }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async processQueue(downloadEvent: TAURI_CHANNEL<DownloadEvent>, queueEvent: TAURI_CHANNEL<QueueEvent>) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("process_queue", { downloadEvent, queueEvent }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async postAria2c(action: string, params: JsonValue[]) : Promise<Result<JsonValue, JsonValue>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("post_aria2c", { action, params }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async removeAria2cTask(queueId: string, id: string, gid: string | null) : Promise<Result<null, JsonValue>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("remove_aria2c_task", { queueId, id, gid }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
headers: Headers,
settings: Settings
}>({
headers: "headers",
settings: "settings"
})

/** user-defined constants **/



/** user-defined types **/

export type CurrentSelect = { dms: number; ads: number; cdc: number; fmt: number }
export type DownloadEvent = { status: "Started"; id: string; gid: string; media_type: MediaType } | { status: "Progress"; id: string; gid: string; content_length: number; chunk_length: number } | { status: "Finished"; id: string; gid: string } | { status: "Error"; code: number; message: string }
export type Headers = ({ [key in string]: string }) & { Cookie: string; "User-Agent": string; Referer: string; Origin: string }
export type InitData = { downloads: QueueInfo[]; hash: string; binary_path: string }
export type JsonValue = null | boolean | number | string | JsonValue[] | { [key in string]: JsonValue }
export type MediaInfoListItem = { title: string; cover: string; desc: string; id: number; cid: number; eid: number; duration: number; ss_title: string; index: number }
export type MediaType = "video" | "audio" | "merge" | "flac"
export type QueueEvent = { type: "Waiting"; data: QueueInfo[] } | { type: "Doing"; data: QueueInfo[] } | { type: "Complete"; data: QueueInfo[] }
export type QueueInfo = { id: string; ts: Timestamp; tasks: Task[]; output: string; info: MediaInfoListItem; currentSelect: CurrentSelect }
export type Settings = { max_conc: number; temp_dir: string; down_dir: string; df_dms: number; df_ads: number; df_cdc: number; auto_check_update: boolean; filename: string; proxy: SettingsProxy; advanced: SettingsAdvanced; theme: Theme; language: string }
export type SettingsAdvanced = { auto_convert_flac: boolean; prefer_pb_danmaku: boolean }
export type SettingsProxy = { addr: string; username: string; password: string }
export type Task = { urls: string[]; gid: string | null; media_type: MediaType; path: string | null }
export type Theme = 
/**
 * Light theme.
 */
"light" | 
/**
 * Dark theme.
 */
"dark"
export type Timestamp = { millis: number; string: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
